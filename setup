#!/bin/bash

# Version     : 0.4
# Author      : Chris Iatrou, Martin Heinl, Johannes Pfeffer,
# License     : GPL

## Planned Features
# Allow 32-bit architecture (branches for Eclipse and PATH in run-eclipse, etc...)
# Eclipse headless import-all instead of import


function usage() {
  echo "This is the setup script for the PLT Microcomputingtechnologies 1/2 toolchain and IDE."
  
  echo "Usage"
  echo "  ./setup [--batch]"
}

## Globals

WORKSPACE_DIR="workspace"
ARCHITECTURE=`uname -m`

# Required packages ##
# Essential packages for builiding, java (for Eclipse) and wget to download resources
REQUIREMENTS="build-essential git openjdk-7-jre wget"
REQUIREMENTS_DEBIAN=$REQUIREMENTS
REQUIREMENTS_SUSE="gcc gcc-c++ make git wget java-1_7_0-openjdk"

# Eclipse version to install
ECLIPSE_PACKAGE="http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/luna/SR2/eclipse-cpp-luna-SR2-linux-gtk-x86_64.tar.gz&r=1"

# GitHub repos to clone and import into the workspace
GITHUB_REPOS=( "${GITHUB_REPOS[@]}" "https://github.com/plt-tud/PLT_MRT_ARM-RPi2.git" )

## Config values/defaults for arguments
CFG_BATCH_MODE=false  # Don't ask questions... assume defaults
CFG_CLEANUP=true      # Remove any downloaded data (reinstall)

function process_arguments() {
  while [ $? -gt 0 ]; do
    ARG="$1"
    
    if [ ${ARG}="-batch" -o  ${ARG}="--batch" ]; then
      CFG_BATCH_MODE=true
    elif [ ${ARG}="--no-clean" -o  ${ARG}="--keep" ]; then
      CFG_CLEANUP=false
    fi
    
    shift 1
  done
}

function log_error () { 
 echo " Error: $@" ; 
}

function log_info () { 
 echo " Info: $@" ; 
}

function download()
{
    local url=$1
    local target=$2
    echo -n "    "
    wget --progress=dot $url -O $target 2>&1 | grep --line-buffered "%" | \
        sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    echo -ne "\b\b\b\b"
    echo " DONE"
}

function install_dependencies() {
    echo "Installing requirements (calling sudo) ..."
    INSTALLOK="FALSE"

    if [ -n "$(echo $DISTRIBUTION | grep debian)" -o -n "$(echo $DISTRIBUTION | grep ubuntu)" -o -n "$(echo $DISTRIBUTION | grep mint )"  ]; then
      while [ $INSTALLOK = "FALSE" ]; do
        echo -e "You are using a debian based distribution.\nDo you want to use 'apt-get' or 'aptitude' to install dependencies?\n'1' for 'apt-get'\n'2' for 'aptitude'\n'0' to abort"
        read -p "> " -n 1 -r DEB_CHOOSEINSTALLER
        echo -e "\n"
        case "$DEB_CHOOSEINSTALLER" in
          "0")  echo "User aborted installation"
                exit 0
                ;;
          "1")  sudo apt-get -q --show-progress install $REQUIREMENTS_DEBIAN && INSTALLOK="TRUE"
                INSTALLOK="TRUE"
                ;;
          "2")  sudo aptitude -q install $REQUIREMENTS_DEBIAN -y		#aptitude behaves different then apt-get and if done the same way, $INSTALLOK would always be TRUE
                if [ $? -eq 0 ]; then
                  INSTALLOK="TRUE"
                fi
                ;;
          *)    echo -e "\nChoice was not recognized. Please select 0..2."
                INSTALLOK="FALSE"
                ;;
        esac
      done
    elif [ -n "$(echo $DISTRIBUTION | grep suse)" ]; then
        sudo zypper install -l --no-recommends $REQUIREMENTS_SUSE && INSTALLOK="TRUE"
    else
        echo "Unable to determine the package manager for your distribution ($DISTRIBUTION/$DISTVERION)."
        exit 1
    fi
    
    if  [ $INSTALLOK != "TRUE" ]; then 
        echo " Failed."
        exit 1
    else
        echo " DONE"
    fi
    echo ""
}

################################################################v
## Script/Main/Start
################################################################v

if [ -x /usr/bin/lsb_release ]; then
  DISTRIBUTION=`/usr/bin/lsb_release -si | awk '{print tolower($0); exit 0}'`
  DISTVERSION=`/usr/bin/lsb_release -sr | awk '{print tolower($0); exit 0}'`
elif [ -x /usr/bin/lsb-release ]; then
  DISTRIBUTION=`/usr/bin/lsb-release -si | awk '{print tolower($0); exit 0}'`
  DISTVERSION=`/usr/bin/lsb-release -sr | awk '{print tolower($0); exit 0}'`
else
  DISTRIBUTION="unknown"
  DISTVERSION="unknown"
fi

##### Welcome #####
echo "This script will install the MRT lecture programming environment for Raspberry Pi cross-compilation."
echo "It will download ~400 MB and use ~1.5GB disk space."
echo

if [ ! $CFG_BATCH_MODE=true ]; then
  read -p "Would you like to continue? (y/N) " -n 1 -r
  echo    
else
  REPLY=y
fi

if [ -z "$(echo $REPLY | grep -i y)" ]; then
    exit 0
fi

##### Some checks #####
# Check architecture
if [ $ARCHITECTURE != "x86_64" ]; then
    log_error "This script is only for the x86_64 architecture."
    exit 1
fi

# Check if Eclipse is running
if ps ax | grep eclipse.equinox | grep -v grep | grep -v $0 > /dev/null; then
    log_error "Eclipse is running! Please exit Eclipse!"
    exit 1
fi

##### Setup environment #####
# Set PATH variable
export PATH=$PATH:"$PWD/raspberrypi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin"

# Install requirements
install_dependencies

# Download eclipse
if [ -d "eclipse" ]; then
    log_info "The 'eclipse' folder already exists."
    echo ""
else
    echo "Downloading eclipse ..."
    download "$ECLIPSE_PACKAGE" eclipse.tar.gz
    echo "Extracting eclipse ..."
    tar -xzf eclipse.tar.gz
    rm -f eclipse.tar.gz
    echo " DONE"
    echo ""
fi

# Raspberry Pi cross-compilation tool chain
if [ -d "raspberrypi" ]; then
    log_info "The folder 'raspberrypi' already exists."
    echo ""
else
    echo "Cloning the Raspberry Pi tools repository. This may take a while, it is big (~200MB download, ~1GB afterwards) ..."
    mkdir raspberrypi
    git clone --depth=1 https://github.com/raspberrypi/tools.git raspberrypi/tools
    echo " DONE"
    echo ""
fi

# Create workspace
echo "Creating/updating MRT workspace ..."
if [ ! -d $WORKSPACE_DIR ]; then
    mkdir $WORKSPACE_DIR
fi

# Clone and import repositories
for REPO in "${GITHUB_REPOS[@]}" 
do
    echo " $REPO"
    if [ ! -d "$WORKSPACE_DIR/$REPO" ]; then
        git clone https://github.com/plt-tud/$REPO.git workspace/$REPO
        eclipse/eclipse -nosplash -data workspace -application org.eclipse.cdt.managedbuilder.core.headlessbuild -import $WORKSPACE_DIR/$REPO
    else
        git -C $WORKSPACE_DIR/$REPO pull
    fi
done

echo " DONE"
echo ""

echo "+++++ INFO ++++"
echo "Start Eclipse with the command ./run-eclipse"
